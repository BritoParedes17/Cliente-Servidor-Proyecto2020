/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tarea02052020;

import giovynet.serial.Baud;
import giovynet.serial.Com;
import giovynet.serial.Parameters;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.InputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.*;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Brito Paredes
 */
public class Servidor extends javax.swing.JFrame {

    /**
     * Creates new form Servidor
     */
    DefaultTableModel datos = new DefaultTableModel();
    conectar bd =new conectar();
    Connection bdc=bd.conectar();
    
    Com selectPuertoCOM;
    Parameters Parametros;
    String cad_recibe="";
    static int puertoEscrito;
    String cadena;
    String datosRS232;
    
    Socket skCliente;
    ServerSocket skServidor;
    InputStream aux;
    DataInputStream flujo;
    DataOutputStream out;
    boolean estado_red=false;
    
    
    public Servidor() {
        initComponents();
        status.setVisible(false);
        setModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        comSelect = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        btnConfig = new javax.swing.JButton();
        status = new javax.swing.JLabel();
        puertoInput = new javax.swing.JTextField();
        enviarDato = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        inID = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        inNombre = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        inCorreo = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        btnRegistrar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        status1 = new javax.swing.JLabel();
        enviarPuerto = new javax.swing.JButton();
        enviarDatoRS232 = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        verDatosEthernet = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        estadoRS232 = new javax.swing.JTextArea();
        guardarRegistroDB = new javax.swing.JButton();
        eliminarRegistroDB = new javax.swing.JButton();
        consultarDB = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Conexi√≥n con RS232");

        comSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "COM1", "COM2", "COM3", "COM4", "COM5", "COM6", "COM7" }));

        jLabel2.setText("Selecciona un puerto");

        btnConfig.setText("Configura el puerto");
        btnConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfigActionPerformed(evt);
            }
        });

        status.setText("Status del puerto COM");

        puertoInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                puertoInputActionPerformed(evt);
            }
        });

        enviarDato.setText("Enviar");
        enviarDato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enviarDatoActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(tabla);

        inID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inIDActionPerformed(evt);
            }
        });

        jLabel3.setText("ID");

        inNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inNombreActionPerformed(evt);
            }
        });

        jLabel4.setText("Nombre");

        inCorreo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inCorreoActionPerformed(evt);
            }
        });

        jLabel5.setText("Correo");

        btnRegistrar.setText("Registrar");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        status1.setText("Puerto del Server");

        enviarPuerto.setText("Activar");
        enviarPuerto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enviarPuertoActionPerformed(evt);
            }
        });

        enviarDatoRS232.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enviarDatoRS232ActionPerformed(evt);
            }
        });

        verDatosEthernet.setColumns(20);
        verDatosEthernet.setRows(5);
        jScrollPane3.setViewportView(verDatosEthernet);

        estadoRS232.setColumns(20);
        estadoRS232.setRows(5);
        jScrollPane4.setViewportView(estadoRS232);

        guardarRegistroDB.setText("Guardar en DB");
        guardarRegistroDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarRegistroDBActionPerformed(evt);
            }
        });

        eliminarRegistroDB.setText("Borrar Registro en DB");
        eliminarRegistroDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarRegistroDBActionPerformed(evt);
            }
        });

        consultarDB.setText("Consultar Registros");
        consultarDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultarDBActionPerformed(evt);
            }
        });

        jLabel6.setText("Enviar Datos a RS232");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(30, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(enviarDatoRS232, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(enviarDato))
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(status)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(comSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnConfig))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(23, 23, 23)
                                        .addComponent(status1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(puertoInput, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(enviarPuerto)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(inNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(inID, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(143, 143, 143)
                                        .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(inCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnRegistrar)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(guardarRegistroDB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(eliminarRegistroDB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(consultarDB)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jLabel2)
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnConfig)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(inID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(inCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(btnRegistrar)
                            .addComponent(btnLimpiar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(inNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(btnEliminar))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(status)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(enviarDato)
                                    .addComponent(enviarDatoRS232, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(status1)
                            .addComponent(enviarPuerto)
                            .addComponent(puertoInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guardarRegistroDB)
                    .addComponent(eliminarRegistroDB)
                    .addComponent(consultarDB))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public void setModel(){
        String [] cabecera = {"ID", "Nombre", "Correo", "Estado"};
        datos.setColumnIdentifiers(cabecera);
        tabla.setModel(datos);
    }
    void agregar(){
        datos.addRow(new Object[] {inID.getText(), inNombre.getText(), inCorreo.getText()});
    }
    
    void eliminar(){
        int fila=tabla.getSelectedRow();
        datos.removeRow(fila);
    }
    
    void limpiar(){
        int filas=datos.getRowCount();
        for (int i=0; i<filas; i++){
            datos.removeRow(0);
        }
    }
    
    private void btnConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfigActionPerformed
        try {
            // TODO add your handling code here:
            Parametros = new Parameters();
            Parametros.setPort(comSelect.getSelectedItem().toString());
            Parametros.setBaudRate(Baud._9600);
            Parametros.setMinDelayWrite(10);
            
            selectPuertoCOM=new Com(Parametros);
            Recibir rx=new Recibir() {};
            rx.start();
            
            status.setText("Puerto COM Concetado");
            status.setVisible(true);
            
        } catch (Exception ex) {
            status.setVisible(true);
            status.setText("No funciona, ups. Puerto Desconectado");

            Logger.getLogger(Servidor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnConfigActionPerformed

    private void puertoInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_puertoInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_puertoInputActionPerformed

    private void enviarDatoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enviarDatoActionPerformed
        send_rs232(enviarDatoRS232.getText());
    }//GEN-LAST:event_enviarDatoActionPerformed

    private void inIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inIDActionPerformed

    private void inNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inNombreActionPerformed

    private void inCorreoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inCorreoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inCorreoActionPerformed

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        // TODO add your handling code here:
        agregar();
    }//GEN-LAST:event_btnRegistrarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        eliminar();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
        limpiar();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void enviarPuertoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enviarPuertoActionPerformed
        puertoEscrito=Integer.parseInt(puertoInput.getText());
        //System.out.println(puertoEscrito);
        recibirEthernet redLeer = new recibirEthernet() {};
        redLeer.start();
    }//GEN-LAST:event_enviarPuertoActionPerformed

    private void enviarDatoRS232ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enviarDatoRS232ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_enviarDatoRS232ActionPerformed
    

////////////////////////////////Metodos para registros MySQL - Inicio///////////////////////////
    private void guardarRegistroDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarRegistroDBActionPerformed
        try{
            PreparedStatement pat=bdc.prepareStatement("INSERT INTO personas(id_persona,dbnombre,dbcorreo,dbestado) VALUES (?,?,?,?)");
            pat.setString(1, inID.getText() );
            pat.setString(2, inNombre.getText() );
            pat.setString(3, inCorreo.getText() );
            pat.setString(4, "Estado");
            pat.executeUpdate();
        }
        catch (SQLException ex) {
            
            Logger.getLogger(Servidor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_guardarRegistroDBActionPerformed

    private void consultarDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultarDBActionPerformed
        String []datos_c =new String [4];
        String sql="SELECT * FROM personas";
        
        try{
            
            Statement st =bdc.createStatement();
            ResultSet rs = st.executeQuery(sql);
                while(rs.next()){
                    datos_c[0]=rs.getString(1);
                    datos_c[1]=rs.getString(2);
                    datos_c[2]=rs.getString(3);
                    datos_c[3]=rs.getString(4);
                    datos.addRow(datos_c);
                }
            
        }catch (Exception ex) {
            
            Logger.getLogger(Servidor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_consultarDBActionPerformed

    private void eliminarRegistroDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarRegistroDBActionPerformed
        String sql= "DELETE FROM personas WHERE id_persona="+inID.getText();
        
        try{
            Statement st= bdc.createStatement();
            st.execute(sql);
                    
        }catch (SQLException ex) {
            
            Logger.getLogger(Servidor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_eliminarRegistroDBActionPerformed
////////////////////////////////Metodos para registros MySQL - Fin///////////////////////////


////////////////////////////////Metodos para RS232 - Inicio///////////////////////////    
    public void read_rs232(){
        try{
            
            boolean detener=false;
            char datoRecibido=0;
            Thread.sleep(2000);
            
            while((datoRecibido = selectPuertoCOM.receiveSingleChar())!='\0'){   
                cad_recibe+=datoRecibido;
                detener=true;
                
            }
            if(detener==true){
                detener=false;
                estadoRS232.setText(cad_recibe);
                datos.addRow(new Object[]{inID.getText(),inNombre.getText(),inCorreo.getText(),cad_recibe});
                System.out.println(cad_recibe);
                datosRS232=cad_recibe;
                cad_recibe="";
            }
        }catch (Exception ex) {            
                    Logger.getLogger(Servidor.class.getName()).log(Level.SEVERE, null, ex);
                 }
    }
    
    public void send_rs232(String datos){
        try{
            JOptionPane.showMessageDialog(null, "Todo bien, se envio");
            selectPuertoCOM.sendString(datos);
             
       }
        catch (Exception ex) {            
                    Logger.getLogger(Servidor.class.getName()).log(Level.SEVERE, null, ex);
                 }
    }
    
    public abstract class Recibir extends Thread{
       @Override
       public void run(){
           
           while(true){
               try{
                   read_rs232();
                   //cad_recibe+=selectPuertoCOM.receiveSingleString();
                   //jTextArea1.setText(cad_recibe);
                    
               } catch (Exception ex) {            
                    Logger.getLogger(Servidor.class.getName()).log(Level.SEVERE, null, ex);
                 }
           }
           
        }
    }
////////////////////////////////Metodos para RS232 - Fin///////////////////////////    

    
    
////////////////////////////////Metodos para conexion Ethernet - Inicio///////////////////////////    
    public abstract class recibirEthernet extends Thread{
        @Override
        public void run(){
            boolean active=true;
            
            try{
                skServidor = new ServerSocket(puertoEscrito);
                JOptionPane.showMessageDialog(null, "Todo bien, est√° conectado");
                
                while(active){
                    skCliente = skServidor.accept();
                    
                    aux = skCliente.getInputStream();
                    flujo = new DataInputStream(aux);
                    cadena = flujo.readUTF();
                    
                    
                    verDatosEthernet.append("Cadena Recibida del cliente: "+cadena+"\n");
                    estado_red=true;
                    
                    if(cadena.equals("0")){
                        //send_rs232(cadena);
                        //Thread.sleep(2000);
                        out= new DataOutputStream(skCliente.getOutputStream());
                        out.writeUTF("MSG del Servidor: RS232 dice: Cadena Recibida de server");
                    }
                    if(cadena.equals("1")){
                        //send_rs232(cadena);
                        //Thread.sleep(2000);
                        out= new DataOutputStream(skCliente.getOutputStream());
                        out.writeUTF("MSG del Servidor: RS232 dice: Cadena Recibida de server");
                        
                    }
                    
                    if(cadena.equals("F")){
                        active=false;
                        System.out.println("Servidor Desconectado");
                        verDatosEthernet.setText("Se recibe del cliente: Desconectado");
                        skCliente.close();
                    }
                    
                }
            }
                catch( Exception e) {
                        System.out.println( e.getMessage() );
                        }
        }
    }
 ////////////////////////////////Metodos para registros MySQL - Fin///////////////////////////   
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Servidor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfig;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JComboBox<String> comSelect;
    private javax.swing.JButton consultarDB;
    private javax.swing.JButton eliminarRegistroDB;
    private javax.swing.JButton enviarDato;
    private javax.swing.JTextField enviarDatoRS232;
    private javax.swing.JButton enviarPuerto;
    private javax.swing.JTextArea estadoRS232;
    private javax.swing.JButton guardarRegistroDB;
    private javax.swing.JTextField inCorreo;
    private javax.swing.JTextField inID;
    private javax.swing.JTextField inNombre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField puertoInput;
    private javax.swing.JLabel status;
    private javax.swing.JLabel status1;
    private javax.swing.JTable tabla;
    private javax.swing.JTextArea verDatosEthernet;
    // End of variables declaration//GEN-END:variables
}
